
# Anyone wanna be president of this IRC server?
# Privsets are required for oper blocks.
# And now to unleash stupidity upon your entire brain.
# (yes, they're named like classes)
privset "locop" {
  # privset[]::extends: privset to extend.
  # your lowest privset should not extend any.

  # privset[]::privs: privileges to grant.
  # this is summed with the privileges in "extends" recursively
  # to form the final privilege list.
  /* Available options:
   *
   * oper:staffer:         allows opers covered by this set to be
   *                      globally opered. Important.
   * oper:kill:            allows users to be /KILL'd by this oper
   * oper:routing:         allows remote SQUIT and CONNECT
   * oper:kline:           allows KLINE and DLINE
   * oper:unkline:         allows UNKLINE and UNDLINE
   * snomask:nick_changes: allows oper to see nickchanges via snomask +n
   * oper:rehash:          allows oper to REHASH config
   * oper:die:             allows DIE and RESTART
   * oper:admin:           gives the oper admin privileges.  admins
   *                      may (un)load modules and see various
   *                      additional information.
   * oper:hidden_admin:    gives the oper admin privileges except that they
   *                      will not have the admin lines in
   *                      whois.
   * oper:xline:           allows use of /quote xline/unxline
   * oper:resv:            allows /quote resv/unresv and cmode +LP
   * oper:operwall:        allows the oper to send/receive operwalls
   * oper:spy:             allows 'operspy' features to see through +s
   *                      channels etc. see /quote help operspy
   * oper:hidden:          hides the oper from /stats p
   * oper:remoteban:       allows remote kline etc
   * oper:mass_notice:     allows sending wallops and mass notices
   * oper:netadmin:        provides complete modehack privileges (with
   *                      override) and makes the oper immune to
   *                      non-netadmin kills.
   * oper:helpop:          Is helpop. May set +h and, if the helpop string
   *                      is defined in general::helpop, will receive a
   *                      special witticism in whois.
   */
  privs = oper:local_kill, oper:operwall;
};

privset "assistant" {
  # privset[]::extends: privset to extend.
  extends = "locop";

  # privset[]::privs: privileges to grant.
  # this is summed with the privileges in "extends" recursively
  # to form the final privilege list.
  privs = oper:staffer, oper:global_kill, oper:routing;
};

privset "assistbot" {
  # privset[]::extends: privset to extend.
  extends = "locop";

  # privset[]::privs: privileges to grant.
  # this is summed with the privileges in "extends" recursively
  # to form the final privilege list.
  privs = oper:staffer, oper:global_kill, oper:kline, oper:unkline,
          oper:remoteban, oper:resv;
};

privset "globop" {
  # privset[]::extends: privset to extend.
  extends = "locop";

  # privset[]::privs: privileges to grant.
  # this is summed with the privileges in "extends" recursively
  # to form the final privilege list.
  privs = oper:staffer, oper:global_kill, oper:kline, oper:remoteban,
          oper:routing, oper:unkline, oper:xline, oper:resv;
};

privset "staffer" {
  # privset[]::extends: privset to extend.
  extends = "globop";

  # privset[]::privs: privileges to grant.
  # this is summed with the privileges in "extends" recursively
  # to form the final privilege list.
  # modules may define their own privs (e.g. oper:abuse:chghost)
  # modules may also overload existing privileges (see general::hideidle
  # for an example)
  privs = oper:helpop, oper:abuse:chghost, oper:mass_notice, oper:override;
};

privset "admin" {
  # privset[]::extends: privset to extend.
  extends = "staffer";

  # privset[]::privs: privileges to grant.
  # this is summed with the privileges in "extends" recursively
  # to form the final privilege list.
  privs = oper:admin, oper:die, oper:rehash, oper:spy;
};

privset "netadmin" {
  # privset[]::extends: privset to extend.
  extends = "admin";

  # privset[]::privs: privileges to grant.
  # this is summed with the privileges in "extends" recursively
  # to form the final privilege list.
  privs = oper:netadmin;
};

# the blocks that require these are in operators.conf.
