# I:lines!

# We aren't even halfway through.
# Buckle up ladies, gentlemen and other such people.
# auth{}; lets users connect.
# On a public installation you will want an auth block with a user
# of "*@*".

auth {
  # auth[n]::user: ident@host mask of the user to be permitted.
  # Ideally you will use IPv4 or 6 addresses rather than DNS
  # names for these. Stackable.
  # You may use CIDR and wildcards.
  user = "*@127.0.0.0/8";
  user = "*@0::1";

  # auth[n]::password: password for this auth block.
  # may optionally be encrypted. is optional in most cases,
  # but required if you use cgiirc (we'll get to that).
  password = "areallydumbpassword";

  # auth[n]::spoof: free-form fake hostname or user@host.
  # do everyone on the network a favour and do not abuse this.
  spoof = "dumb.localhoster";

  # auth[n]::flags: flags of this auth block.
  /* from the original: Possible flags in auth:
   * 
   * encrypted            | password is encrypted with mkpasswd
   * spoof_notice         | give a notice when spoofing hosts
   * exceed_limit (old >) | allow user to exceed class user limits
   * kline_exempt (old ^) | exempt this user from klines,
   *                      + glines, and xlines.
   * dnsbl_exempt         | exempt this user from dnsbls
   * spambot_exempt       | exempt this user from spambot checks
   * shide_exempt         | exempt this user from serverhiding
   * jupe_exempt          | exempt this user from generating
   *                      + warnings joining juped channels
   * resv_exempt          | exempt this user from resvs
  * flood_exempt         | exempt this user from flood limits
  *                      | USE WITH CAUTION.
   * no_tilde     (old -) | don't prefix ~ to username if no ident
   * need_ident   (old +) | require ident for user in this class
   * need_ssl             | require SSL/TLS for user in this class
   * need_sasl            | require SASL id for user in this class
   * extend_chans         | give this user a higher channel limit.
   *                      + see general{}; and use with caution.
   */
  flags = kline_exempt, exceed_limit, extend_chans;

  # auth[n]::class: class this auth block is in.
  # you have been reading, haven't you?
  class = "UO100";
};

# auth: a cgi:irc auth block.

auth {
  # auth[n]::user: ident@host mask of the user to be permitted.
  # Ideally you will use IPv4 or 6 addresses rather than DNS
  # names for these. Stackable.
  # You may use CIDR and wildcards.
  user = "*@*.clients.kiwiirc.com";

  # auth[n]::webircname: name of webirc. sets
  # METADATA WEBIRCNAME and shows up in /WHOIS of users in this
  # auth block.
  webircname = "kiwiirc.com";

  # auth[n]::password: password for this auth block.
  # required - this is a cgiirc block.
  password = "areallydumbpassword";

  # auth[n]::spoof: free-form fake hostname or user@host.
  # do everyone on the network a favour and do not abuse this.
  # !!!: not used in cgiirc.

  # auth[n]::flags: flags of this auth block.
  /* from the original: Possible flags in auth:
   * 
   * encrypted            | password is encrypted with mkpasswd
   * spoof_notice         | give a notice when spoofing hosts
   * exceed_limit (old >) | allow user to exceed class user limits
   * kline_exempt (old ^) | exempt this user from klines,
   *                      + glines, and xlines.
   * dnsbl_exempt         | exempt this user from dnsbls
   * spambot_exempt       | exempt this user from spambot checks
   * shide_exempt         | exempt this user from serverhiding
   * jupe_exempt          | exempt this user from generating
   *                      + warnings joining juped channels
   * resv_exempt          | exempt this user from resvs
   * flood_exempt         | exempt this user from flood limits
   *                      | USE WITH CAUTION.
   * no_tilde     (old -) | don't prefix ~ to username if no ident
   * need_ident   (old +) | require ident for user in this class
   * need_ssl             | require SSL/TLS for user in this class
   * need_sasl            | require SASL id for user in this class
   * extend_chans         | give this user a higher channel limit.
   *                      + see general{}; and use with caution.
   */
  # !!!: not normally used for public access.
  # no-tilde is useful fqr webircs, however.
  flags = no_tilde;

  # auth[n]::class: class this auth block is in.
  # you have been reading, haven't you?
  class = "U100";
};

# auth: another example auth block, for public access without
# significant restriction.

# MOST GENERAL FOR LAST, YOUNG PADAWAN

auth {
  # auth[n]::user: ident@host mask of the user to be permitted.
  # Ideally you will use IPv4 or 6 addresses rather than DNS
  # names for these. Stackable.
  # You may use CIDR and wildcards.
  user = "*@*";

  # auth[n]::password: password for this auth block.
  # may optionally be encrypted. is optional in most cases,
  # but required if you use cgiirc (we'll get to that).
  # !!!: not used for public access.
  #password = "areallydumbpassword";

  # auth[n]::spoof: free-form fake hostname or user@host.
  # do everyone on the network a favour and do not abuse this.
  # !!!: not normally used for public access unless running tor
  # or something alike.
  spoof = "dumb.localhoster";

  # auth[n]::flags: flags of this auth block.
  /* from the original: Possible flags in auth:
   * 
   * encrypted            | password is encrypted with mkpasswd
   * spoof_notice         | give a notice when spoofing hosts
   * exceed_limit (old >) | allow user to exceed class user limits
   * kline_exempt (old ^) | exempt this user from klines,
   *                      + glines, and xlines.
   * dnsbl_exempt         | exempt this user from dnsbls
   * spambot_exempt       | exempt this user from spambot checks
   * shide_exempt         | exempt this user from serverhiding
   * jupe_exempt          | exempt this user from generating
   *                      + warnings joining juped channels
   * resv_exempt          | exempt this user from resvs
   * flood_exempt         | exempt this user from flood limits
   *                      | USE WITH CAUTION.
   * no_tilde     (old -) | don't prefix ~ to username if no ident
   * need_ident   (old +) | require ident for user in this class
   * need_ssl             | require SSL/TLS for user in this class
   * need_sasl            | require SASL id for user in this class
   * extend_chans         | give this user a higher channel limit.
   *                      + see general{}; and use with caution.
   */
  # !!!: not normally used for public access.
  #btw, <none> isn't a valid flag - don't use it.
  #flags = <none>;

  # auth[n]::class: class this auth block is in.
  # you have been reading, haven't you?
  class = "U100";
};

  # auth[n]::redirserv redirport: can be used to redirect users.
  # they don't have to obey, and this is never used in today's
  # world, so is not exemplified here. redirserv is a quoted
  # string and redirport is a number.
