
# operator: oper blocks. This is how you get your privileges.

operator "examplenetworkadministrator" {
  # operator[]::name: the name is specified the same way a
  # class name is specified.

  # operator[]::flags: oper block flags. ~ to negate.
  # Available flags:
  # encrypted   - default on. operator[]::password is encrypted
  #               by mkpasswd.
  # need_ssl    - default off. implied on if
  #               operator[]::fingerprint is specified. require
  #               connection via SSL for this oper block to work.
  flags = need_ssl;

  # operator[]::user: ident@host mask of the oper using this
  # block. Ideally you will use IPv4 or 6 addresses rather than
  # DNS names for these. Stackable.
  # You may use CIDR, auth{}; spoofs and wildcards.
  user = "*@127.0.0.1";
  user = "*@dumb.localhoster";

  # operator[]::password: operator password. unless flag
  # encrypted is specifically negated, this will need to be
  # encrypted using $IRCD_INSTALL_PATH/mkpasswd.
  # (this one is "lazyoper")
  password = "$6$a57CqigFwAqpLkjH$S1V46twtmjnFacLSoeY9Tcbj/45khr61SPnxo69r/BnzmLsWU1V9RrWaiPvFpwxMCpYiKdzS/lywSH4J9C/dp.";

  # operator[]::rsa_public_key_file: challenge oper public key
  # file. see doc/challenge.txt for more information.
  # rsa_public_key_file = "/home/dumboper/ircd/etc/examplenetworkadministrator.pub";

  # operator[]::fingerprint: if specified, this oper block will
  # require SSL with the following client certificate fingerprint
  # and refuse opers from other fingerprints.
  # fingerprint = "<insert applicable sha1 fingerprint here>";

  # operator[]::swhois operator[]::operstring
  # if specified, this oper block will have:
  # swhois:
  #  a custom witticism in WHOIS
  # operstring:
  #  a WHOIS OPER reply that does not follow the form
  #  defined in general::default_*
  # do not define either of these unless you want them.
  # swhois will stick on deoper.
  swhois = "great scott! it's an oper!";
  operstring = "is operating the IRC server";

  # operator[]::umodes: if specified, the user modes this oper
  # will automatically be afforded upon successful oper-up.
  # if not specified, the user will be given
  # general::oper_umodes.
  /* usermodes configurable: a list of usermodes for
   * operator[]::umodes.
   *
   * not all of these usermodes are oper-only.

   * additionally, some are modular and won't be available on all
   * installations. see modules.conf.
   * +g - callerid   - Server side query blocker
   * +D - deaf       - Don't see channel messages
   * +i - invisible  - Not shown in NAMES or WHO unless you share
   *                   a channel
   * +h - helpop     - will show on /stats p, and with whois_helpop
   *                   will have a snazzy whois line defined in
   *                   general::helpopstring
   * +l - locops     - See LOCOPS messages
   * +Q - noforward  - Unaffected by channel forwarding
   * +R - regonlymsg - Server side query blocker, registered users
   *                   are exempt
   * +s - servnotice - See server notices
   * +w - wallop     - See oper and server generated WALLOPS
   * +z - operwall   - See operwalls
   * +x - cloaked    - Your hostname is hidden using the cloaking module
   *                   available to regular users
   * +I - hideidle   - Your idle time is hidden from normal users
   * +M - chanhide   - Your channel list (which is already shortened to
   *                   shared channels with +i) is hidden altogether.
   * +P - override_chanhide
   *                   You can see through other people's +M.
   * +F - hidecert   - Your certificate fingerprint is hidden.
   */
  umodes = servnotice, wallop, operwall, locops;

  # operator[]::snomask: if specified, the server notice mask the
  # oper will automatically be afforded upon successful oper-up.
  # if not specified, the user will be given
  # general::oper_snomask.
  /* snomasks configurable:
   * +b - spambot/flood warnings
   * +c - local client connections and exits
   * +C - bot-friendly, extended local client connections & exits
   * +d - server de-bug messages
   * +f - clients refused due to limits
   * +F - (extensions/sno_farconnect.so) remote client conne/exit
   * +k - technical kill messages
   * +n - local client nick changes
   * +r - invalid idents and dumb http proxies
   * +s - generic server messages and oper kills
   * +u - unauthorised (failed) client connections
   * +x - server connections and exits
   * +y - juped channel join attempts and miscellany
   * +W - (extensions/sno_whois.so) local whois/whois seeing
   *      idle time spy
   * +Z - operspy usage
   */
  # A sane snomask combination for total information awareness
  # is exemplified below.
  snomask = "+bcfFknrsuxyZ";

  # oper[]::flood_multiplier: how severely flood-restricted this user is.
  # 16 denotes a level of restriction typical of that offered to normal
  # users.
  # 8 allows you to flood twice as fast as a normal user
  # 4 is the default, and is a typical multiplier for OPERS.
  # 2 is twice as fast as no_oper_flood.
  # 0 is true no flood.
  # No-oper-flood is still configurable in the general:: section but
  # presumably has no effect. In classes and opers, true no flood
  # is flood_multiplier = 0.
  flood_multiplier = 4;

  # operator[]::privset: privset to use.
  privset = "netadmin";
};

# and for people who like copy-pasting and know already how charybdis works

# explanations remain because this ircd supports some things not all
# chary forks do.

operator "ircingtoolong" {
  flags = need_ssl;
  # operator[]::user: ident@host mask of the oper using this
  # block. may exist in multitudes.
  user = "*@127.0.0.1";
  # operator[]::password: operator password. encrypted unless flagged
  # ~encrypted.
  password = "$6$a57CqigFwAqpLkjH$S1V46twtmjnFacLSoeY9Tcbj/45khr61SPnxo69r/BnzmLsWU1V9RrWaiPvFpwxMCpYiKdzS/lywSH4J9C/dp.";

  # most chary admins don't know what this is. use if you know what you're
  # doing.
  #rsa_public_key_file = "etc/ircingtoolong.pub";

  # operator[]::fingerprint: SSL fingerprint of oper. leave commented to
  # disable.
  # fingerprint = "<insert applicable sha1 fingerprint here>";

  # operator[]::swhois operator[]::operstring
  # if specified, this oper block will have an attached swhois line.
  # or for operstring, a different operstring.
  # currently no way to turn one's swhois off. This will be changed some day.
  swhois = "great scott! it's an oper!";
  operstring = "is operating the IRC server";
  
  umodes = servnotice, wallop, operwall, locops, override_chanhide, chanhide;

  # operator[]::snomask: if specified, the server notice mask the
  # oper will automatically be afforded upon successful oper-up.
  snomask = "+bcfFknrsuxyZ";

  # oper[]::flood_multiplier: how severely flood-restricted this user is.
  # 16 is regular, 4 is no flood, 0 is true no flood.
  flood_multiplier = 4;

  # operator[]::privset: privset to use. CHANGE THIS!
  privset = "netadmin";
};
